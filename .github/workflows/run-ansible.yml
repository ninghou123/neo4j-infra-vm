# .github/workflows/run-ansible.yml
name: Neo4j config update (dev)

on:
  workflow_dispatch: {}

jobs:
  run:
    runs-on: [self-hosted]   # add extra labels if your runner needs them
    env:
      # Ensure your ansible.cfg in inventories/ is used
      ANSIBLE_CONFIG: inventories/ansible.cfg
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Show runner info (debug)
        run: |
          echo "Runner: $(hostname)"
          echo "Workspace: $GITHUB_WORKSPACE"
          uname -a
          echo "Repo tree:"
          ls -R

      - name: Prepare SSH key
        run: |
          umask 077
          echo "${{ secrets.NEO4J_SSH_KEY }}" > "$GITHUB_WORKSPACE/id_rsa"
          chmod 600 "$GITHUB_WORKSPACE/id_rsa"

      - name: Ensure Ansible available (install if missing)
        run: |
          if ! command -v ansible >/dev/null 2>&1; then
            python3 -m pip install --user --upgrade pip
            python3 -m pip install --user ansible
            echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          fi
          ansible --version

      - name: Sanity checks
        run: |
          # Inventory is under inventories/dev.ini
          ansible-inventory -i inventories/dev.ini --list
          # Syntax check the playbook path
          ansible-playbook -i inventories/dev.ini playbooks/Neo4j_update.yml --syntax-check

      - name: Run Ansible playbook (dev)
        env:
          ANSIBLE_HOST_KEY_CHECKING: "False"
          ANSIBLE_BECOME_PASSWORD: ${{ secrets.NEO4J_SUDO_PASSWORD }}
        run: |
          set -euo pipefail
          ansible-playbook \
            -i inventories/dev.ini \
            --key-file "$GITHUB_WORKSPACE/id_rsa" \
            -u "${{ secrets.NEO4J_SSH_USER }}" \
            --become --become-method=sudo \
            -e ansible_become_password="$ANSIBLE_BECOME_PASSWORD" \
            -e @inventories/vars.yml \
            playbooks/Neo4j_update.yml

          # Optional verification using Ansible (NOT raw ssh) so we can use vars
          echo "----- effective line after play (via Ansible ad-hoc) -----"
          ansible neo4j \
            -i inventories/dev.ini \
            --key-file "$GITHUB_WORKSPACE/id_rsa" \
            -u "${{ secrets.NEO4J_SSH_USER }}" \
            --become --become-method=sudo \
            -e @inventories/vars.yml \
            -m command \
            -a "bash -lc \"grep -E '^[[:space:]]*dbms\\.tx_log\\.rotation\\.retention_policy' '{{ neo4j_config_file }}' || true\""

      - name: Cleanup sensitive files
        if: always()
        run: shred -u "$GITHUB_WORKSPACE/id_rsa" || rm -f "$GITHUB_WORKSPACE/id_rsa"
