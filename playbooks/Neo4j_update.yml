---
- name: Edit neo4j.conf with ONE conditional backup, then conditional restart (built-ins only)
  hosts: neo4j
  gather_facts: false
  serial: 1
  any_errors_fatal: true
  
  become: "{{ neo4j_become }}"
  become_user: "{{ neo4j_become_user }}"
  become_flags: "-i"


  vars_files:
    - "{{ playbook_dir }}/../inventories/vars.yml"

  vars:
    neo4j_env:
      neo4j_user: "neo4j"
      neo4j_home: "{{ neo4j_home }}"
      conf_dir: "{{ neo4j_home }}/conf"
      conf_file: "neo4j.conf"
      neo4j_ctl: "{{ neo4j_home }}/bin/neo4j"
      conf_path: "{{ conf_dir }}/{{ conf_file }}"
      JAVA_HOME: "{{ java_home }}"

    desired_params:
      - { key: "dbms.track_query_cpu_time",    value: "false" }
      - { key: "dbms.track_query_memory_time", value: "false" }

    # Polling tunables
    stop_retries: 30     # ~30s if delay=1
    stop_delay: 1
    start_retries: 120   # ~120s if delay=1
    start_delay: 1

  tasks:
    # ---------- Prechecks & capture original ----------
    - name: Ensure neo4j.conf exists
      ansible.builtin.stat:
        path: "{{ conf_path }}"
      register: conf_stat

    - name: Fail if neo4j.conf is missing
      ansible.builtin.fail:
        msg: "neo4j.conf is missing: {{ conf_path }}"
      when: not conf_stat.stat.exists

    - name: Check write permission as {{ neo4j_user }}
      ansible.builtin.command:
        cmd: "test -w {{ conf_path }}"
      register: writable_check
      changed_when: false
      failed_when: writable_check.rc != 0

    - name: Capture status BEFORE (rc==0 means running for neo4j CLI)
      ansible.builtin.command:
        cmd: "{{ neo4j_ctl }} status"
      register: status_before
      changed_when: false
      failed_when: false

    - name: Compute 'was_running' flag
      ansible.builtin.set_fact:
        was_running: "{{ status_before.rc == 0 }}"
      changed_when: false

    - name: Slurp original neo4j.conf (for single post-change backup)
      ansible.builtin.slurp:
        path: "{{ conf_path }}"
      register: conf_slurp

    - name: Remember original checksum and a high-res timestamp
      ansible.builtin.set_fact:
        orig_checksum: "{{ conf_stat.stat.checksum | default('') }}"
        ts: "{{ lookup('pipe','date +%Y%m%d%H%M%S%N') }}"
      changed_when: false

    # ---------- De-duplicate, then ensure canonical lines ----------
    - name: Remove any existing lines for each key (commented or not)
      ansible.builtin.replace:
        path: "{{ conf_path }}"
        regexp: "^[ \\t]*#?[ \\t]*{{ item.key | regex_escape }}[ \\t]*=.*$"
        replace: ""
      loop: "{{ desired_params }}"
      loop_control:
        label: "{{ item.key }}"
      register: dedupe_result

    - name: Ensure canonical key=value lines exist (append if missing)
      ansible.builtin.lineinfile:
        path: "{{ conf_path }}"
        regexp: "^[ \\t]*#?[ \\t]*{{ item.key | regex_escape }}[ \\t]*=.*$"
        line: "{{ item.key }}={{ item.value }}"
        insertafter: EOF
        state: present
        create: yes
        backrefs: no
        backup: false
      loop: "{{ desired_params }}"
      loop_control:
        label: "{{ item.key }}={{ item.value }}"
      register: ensure_result

    # ---------- Detect whether the file changed ----------
    - name: Stat neo4j.conf after edits
      ansible.builtin.stat:
        path: "{{ conf_path }}"
      register: conf_after

    - name: Decide if content changed
      ansible.builtin.set_fact:
        file_changed: "{{ (orig_checksum | length > 0) and (conf_after.stat.checksum | default('') != orig_checksum) }}"
      changed_when: false

    # ---------- Single backup only if a change occurred ----------
    - name: Write single timestamped backup with original content (only if changed)
      ansible.builtin.copy:
        dest: "{{ conf_path }}.{{ ts }}"
        content: "{{ conf_slurp.content | b64decode }}"
      when: file_changed
      register: backup_copy

    # ---------- Validation of desired lines ----------
    - name: Read final file content
      ansible.builtin.slurp:
        path: "{{ conf_path }}"
      register: final_slurp

    - name: Validate resulting lines exist (pure built-ins)
      ansible.builtin.assert:
        that:
          - (final_slurp.content | b64decode) is regex("(?m)^[ \\t]*{{ item.key | regex_escape }}[ \\t]*=[ \\t]*{{ item.value }}(?:[ \\t]*#.*)?[ \\t]*$")
        fail_msg: "Missing or mismatched: {{ item.key }}={{ item.value }}"
      loop: "{{ desired_params }}"
      loop_control:
        label: "{{ item.key }}={{ item.value }}"

    # ---------- CONDITIONAL restart flow (only if it was running AND file changed) ----------
    - name: Stop Neo4j (only if running and config changed)
      ansible.builtin.command:
        cmd: "{{ neo4j_ctl }} stop"
      register: stop_out
      when:
        - file_changed
        - was_running
      changed_when: true
      failed_when: false

    - name: Wait until Neo4j is stopped
      ansible.builtin.command:
        cmd: "{{ neo4j_ctl }} status"
      register: stop_wait
      changed_when: false
      failed_when: false
      until: stop_wait.rc != 0
      retries: "{{ stop_retries }}"
      delay: "{{ stop_delay }}"
      when:
        - file_changed
        - was_running

    - name: Start Neo4j in nohup (background)
      ansible.builtin.shell: |
        nohup "{{ neo4j_ctl }}" start >/dev/null 2>&1 &
      args:
        executable: /bin/bash
      register: start_nohup
      changed_when: true
      when:
        - file_changed
        - was_running

    - name: Wait until Neo4j is running
      ansible.builtin.command:
        cmd: "{{ neo4j_ctl }} status"
      register: start_wait
      changed_when: false
      failed_when: false
      until: start_wait.rc == 0
      retries: "{{ start_retries }}"
      delay: "{{ start_delay }}"
      when:
        - file_changed
        - was_running

    - name: Capture status AFTER (final)
      ansible.builtin.command:
        cmd: "{{ neo4j_ctl }} status"
      register: status_after
      changed_when: false
      failed_when: false

    # ---------- Summary ----------
    - name: Summary
      ansible.builtin.debug:
        msg:
          - "Config changed: {{ file_changed }}"
          - "Neo4j was running before: {{ was_running }}"
          - >-
            Backup: {{
              (file_changed | bool)
              | ternary(conf_path ~ '.' ~ ts, 'no backup (file unchanged)')
            }}
          - >-
            Stop issued: {{
              (file_changed and was_running) | ternary('yes', 'no')
            }}
          - >-
            Start issued (nohup): {{
              (file_changed and was_running) | ternary('yes', 'no')
            }}
          - "Status BEFORE: rc={{ status_before.rc }} stdout={{ (status_before.stdout | default('')) | trim }}"
          - "Status AFTER : rc={{ status_after.rc }} stdout={{ (status_after.stdout  | default('')) | trim }}"
