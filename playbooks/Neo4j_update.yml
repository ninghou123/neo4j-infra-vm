---
- name: Install & manage Neo4j via systemd (tarball install)
  hosts: neo4j
  become: true
  gather_facts: true

  vars:
    # === Adjust these to your environment ===
    neo4j_user: neo4j
    neo4j_group: neo4j
    neo4j_home: /neo4j/neo4j/neo4j-enterprise-4.4.45
    neo4j_bin:  /neo4j/neo4j/neo4j-enterprise-4.4.45/bin
    java_home:  /usr/lib/jvm/java-17-openjdk   # or java-11-openjdk if thatâ€™s what you use

    # Ports/readiness
    bolt_host: 127.0.0.1
    bolt_port: 7687
    wait_timeout_sec: 600

    # Journald tail for visibility
    journal_lines: 120

    # Service name we manage
    neo4j_service_name: neo4j

  pre_tasks:
    - name: Ensure we are on a systemd host
      ansible.builtin.assert:
        that:
          - ansible_service_mgr == "systemd"
        fail_msg: >-
          This host does not use systemd (ansible_service_mgr={{ ansible_service_mgr }}).
          Use a different supervisor (e.g., OpenRC service, supervisord) or move to a systemd host.

    - name: Ensure Neo4j install paths exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - "{{ neo4j_home }}"
        - "{{ neo4j_home }}/data"
        - "{{ neo4j_home }}/logs"

    - name: Ensure neo4j user/group own the install
      ansible.builtin.file:
        path: "{{ neo4j_home }}"
        owner: "{{ neo4j_user }}"
        group: "{{ neo4j_group }}"
        recurse: true
        state: directory

    - name: Sanity check the neo4j launcher exists
      ansible.builtin.stat:
        path: "{{ neo4j_bin }}/neo4j"
      register: neo4j_bin_stat

    - name: Fail early if neo4j bin not found
      ansible.builtin.fail:
        msg: "Neo4j launcher not found at {{ neo4j_bin }}/neo4j"
      when: not neo4j_bin_stat.stat.exists

  tasks:
    - name: Install /etc/systemd/system/{{ neo4j_service_name }}.service
      ansible.builtin.copy:
        dest: "/etc/systemd/system/{{ neo4j_service_name }}.service"
        mode: "0644"
        content: |
          [Unit]
          Description=Neo4j Graph Database
          After=network-online.target
          Wants=network-online.target
          RequiresMountsFor={{ neo4j_home }} {{ neo4j_home }}/data

          [Service]
          Type=simple
          User={{ neo4j_user }}
          Group={{ neo4j_group }}
          WorkingDirectory={{ neo4j_home }}
          Environment="NEO4J_HOME={{ neo4j_home }}" "NEO4J_CONF={{ neo4j_home }}/conf" "JAVA_HOME={{ java_home }}" "PATH={{ neo4j_bin }}:/usr/bin:/bin"
          ExecStart={{ neo4j_bin }}/neo4j console
          ExecStop={{ neo4j_bin }}/neo4j stop
          Restart=on-failure
          RestartSec=10s
          TimeoutStartSec=10min
          TimeoutStopSec=3min
          LimitNOFILE=100000
          NoNewPrivileges=true
          PrivateTmp=true
          ProtectSystem=full
          ProtectHome=true
          ReadWritePaths={{ neo4j_home }} /var/log

          [Install]
          WantedBy=multi-user.target
      notify:
        - daemon-reload
        - restart neo4j

    - name: Ensure drop-in override directory exists
      ansible.builtin.file:
        path: "/etc/systemd/system/{{ neo4j_service_name }}.service.d"
        state: directory
        mode: "0755"

    - name: Install override.conf (startup timeout & restart policy)
      ansible.builtin.copy:
        dest: "/etc/systemd/system/{{ neo4j_service_name }}.service.d/override.conf"
        mode: "0644"
        content: |
          [Service]
          TimeoutStartSec=600s
          Restart=on-failure
          RestartSec=10s
      notify:
        - daemon-reload
        - restart neo4j

    - name: Enable and start service
      ansible.builtin.systemd:
        name: "{{ neo4j_service_name }}"
        enabled: true
        state: started

    - name: Wait for Bolt readiness
      ansible.builtin.wait_for:
        host: "{{ bolt_host }}"
        port: "{{ bolt_port }}"
        delay: 2
        timeout: "{{ wait_timeout_sec }}"

    - name: Show systemd status
      ansible.builtin.command:
        cmd: "systemctl --no-pager --full status {{ neo4j_service_name }}"
      register: neo4j_systemd_status
      changed_when: false
      failed_when: false

    - name: Print status
      ansible.builtin.debug:
        var: neo4j_systemd_status.stdout

    - name: Tail recent journal
      ansible.builtin.command:
        cmd: "journalctl -u {{ neo4j_service_name }} -n {{ journal_lines }} --no-pager"
      register: neo4j_journal
      changed_when: false
      failed_when: false

    - name: Print journal tail
      ansible.builtin.debug:
        var: neo4j_journal.stdout

  handlers:
    - name: daemon-reload
      ansible.builtin.systemd:
        daemon_reload: true

    - name: restart neo4j
      ansible.builtin.systemd:
        name: "{{ neo4j_service_name }}"
        state: restarted
