---
- name: Start Neo4j only (bin mode)
  hosts: neo4j
  gather_facts: false

  become: "{{ neo4j_become }}"
  become_user: "{{ neo4j_become_user }}"
  become_flags: "-i"

  vars_files:
    - "{{ playbook_dir }}/../inventories/vars.yml"

  vars:
    neo4j_env:
      NEO4J_HOME: "{{ neo4j_home }}"
      NEO4J_CONF: "{{ neo4j_home }}/conf"
      PATH: "{{ neo4j_bin_dir }}:/usr/bin:/bin"
      JAVA_HOME: "{{ java_home }}"

  tasks:
    - name: Show which user will run the commands
      become: true
      become_user: "{{ neo4j_become_user | default('neo4j') }}"
      become_flags: "-i"
      command: whoami
      register: whoami_out

    - name: Print user
      debug:
        msg: "Running as user: {{ whoami_out.stdout }}"

    - name: Show PATH and which neo4j would be used (sanity check)
      become: true
      become_user: "{{ neo4j_become_user | default('neo4j') }}"
      become_flags: "-i"
      environment: "{{ neo4j_env }}"
      shell: |
        set -euo pipefail
        echo "PWD=$(pwd)"
        echo "PATH=$PATH"
        echo "which neo4j:"
        which neo4j || true
        echo "resolved:"
        if which neo4j >/dev/null 2>&1; then readlink -f "$(which neo4j)" || true; fi
        echo "bin dir listing:"
        ls -l "{{ neo4j_bin_dir }}/neo4j" || true
      args:
        chdir: "{{ neo4j_bin_dir }}"
        executable: /bin/bash
      register: which_out
    
    - debug:
        var: which_out.stdout


    - name: Print binary resolution info
      debug:
        var: which_out.stdout

    - name: Start Neo4j via bin script (explicit from bin dir)
      become: true
      become_user: "{{ neo4j_become_user | default('neo4j') }}"
      become_flags: "-i"
      environment: "{{ neo4j_env }}"
      command: ./neo4j start
      args:
        chdir: "{{ neo4j_bin_dir }}"
      register: neo4j_start
      # Treat non-zero exit as failure; consider 'already running' a no-op
      failed_when: neo4j_start.rc != 0
      changed_when: "'already running' not in neo4j_start.stdout | lower"

    - name: Show start command results (rc/stdout/stderr)
      debug:
        msg:
          - "rc={{ neo4j_start.rc }}"
          - "stdout={{ neo4j_start.stdout }}"
          - "stderr={{ neo4j_start.stderr }}"
          - "cmd={{ neo4j_start.cmd }}"
          - "cwd={{ neo4j_bin_dir }}"

    - name: Check Neo4j status (does not fail the play)
      become: true
      become_user: "{{ neo4j_become_user | default('neo4j') }}"
      become_flags: "-i"
      environment: "{{ neo4j_env }}"
      command: ./neo4j status
      args:
        chdir: "{{ neo4j_bin_dir }}"
      register: neo4j_status
      failed_when: false
      changed_when: false

    - name: Print status output
      debug:
        var: neo4j_status.stdout

    - name: Tail last 200 lines of neo4j.log (debug only)
      become: true
      become_user: "{{ neo4j_become_user | default('neo4j') }}"
      become_flags: "-i"
      command: tail -n 200 "{{ neo4j_home }}/logs/neo4j.log"
      register: neo4j_log
      failed_when: false
      changed_when: false

    - name: Print log tail
      debug:
        var: neo4j_log.stdout
