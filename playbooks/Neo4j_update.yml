# playbooks/Neo4j_update.yml
---
- name: Update Neo4j config on this VM and restart (with safeguards + report)
  hosts: neo4j
  serial: 1
  any_errors_fatal: true
  gather_facts: false

  # default to the runtime user for file edits; handlers override as needed
  become: true
  become_user: "{{ neo4j_user | default('neo4j') }}"
  become_method: sudo

  # Load your single source of truth for desired settings
  vars_files:
    - "{{ playbook_dir }}/../inventories/vars.yml"

  pre_tasks:
    - name: Precheck | Confirm neo4j.conf exists
      stat:
        path: "{{ neo4j_config_file }}"
      register: cfg

    - name: Precheck | Confirm neo4j CLI exists
      stat:
        path: "{{ neo4j_ctl }}"
      register: cli

    - name: Precheck | Fail early if files missing
      fail:
        msg: >-
          Missing required file(s):
          {% if not cfg.stat.exists %}neo4j.conf {% endif %}
          {% if not cli.stat.exists %}neo4j CLI{% endif %}.
          Check neo4j_home/neo4j_config_file/neo4j_ctl.
      when: not cfg.stat.exists or not cli.stat.exists

    - name: Precheck | Config is writable by run-as user
      command: test -w "{{ neo4j_config_file }}"
      register: writable_check
      changed_when: false

    - name: Precheck | Fail if config is not writable
      fail:
        msg: "neo4j.conf is not writable by {{ neo4j_user | default('neo4j') }}: {{ neo4j_config_file }}"
      when: writable_check.rc != 0

    - name: Capture status BEFORE
      command: "{{ neo4j_ctl }} status"
      register: status_before
      failed_when: false
      changed_when: false

  tasks:
    - name: Backup current config (timestamped)
      copy:
        src: "{{ neo4j_config_file }}"
        dest: "{{ neo4j_config_file }}{{ backup_suffix | default('.pre_ansible_' + lookup('pipe','date +%Y%m%d%H%M%S')) }}"
        remote_src: true

    # Apply ONLY the keys you put in inventories/vars.yml -> config_parameters
    # ini_file is robust for key=value style configs, and idempotent.
    - name: Ensure desired parameters are present/updated (idempotent)
      ansible.builtin.ini_file:
        path: "{{ neo4j_config_file }}"
        option: "{{ item.key }}"
        value: "{{ item.value }}"
        no_extra_spaces: true
        backup: false
      loop: "{{ (config_parameters | default({})) | dict2items }}"
      register: edit_results

    # Decide if anything changed
    - name: Compute whether any parameter changed
      set_fact:
        changed_any: "{{ (edit_results.results | selectattr('changed') | list | length) > 0 }}"
      changed_when: false

    # Trigger restart sequence only if needed (or force via -e force_restart=true)
    - name: Trigger restart if config changed OR force_restart=true
      when: changed_any or (force_restart | default(false) | bool)
      debug:
        msg: "Config changed={{ changed_any }} or force_restart=true → restarting Neo4j"
      changed_when: true
      notify:
        - Stop Neo4j
        - Start Neo4j
        - Wait until running
        - Wait for Bolt
        - Restart service
        - Wait until running (svc)
        - Wait for Bolt (svc)

    - meta: flush_handlers

    - name: Capture status AFTER
      command: "{{ neo4j_ctl }} status"
      register: status_after
      failed_when: false
      changed_when: false

    - name: Tail last logs (neo4j.log)
      command: "tail -n 80 {{ neo4j_home }}/logs/neo4j.log"
      register: tail_neo4j_log
      failed_when: false
      changed_when: false

    - name: Tail last logs (debug.log)
      command: "tail -n 80 {{ neo4j_home }}/logs/debug.log"
      register: tail_debug_log
      failed_when: false
      changed_when: false

    - name: Build run report | Set timestamp
      set_fact:
        run_ts: "{{ lookup('pipe','date +%Y%m%d%H%M%S') }}"
      changed_when: false

    - name: Build run report | Assemble content
      set_fact:
        run_report: |-
          Neo4j Ansible run on {{ inventory_hostname }} @ {{ run_ts }}
          run_as_user: {{ neo4j_user | default('neo4j') }}
          neo4j_home: {{ neo4j_home }}
          conf: {{ neo4j_config_file }}
          ctl: {{ neo4j_ctl }}
          wait target: {{ neo4j_wait_host | default(inventory_hostname) }}:{{ neo4j_wait_port }}

          changed params: {{
            (edit_results.results | selectattr('changed') | map(attribute='item.key') | list) | join(', ')
            if edit_results is defined else 'n/a'
          }}

          ---- status BEFORE ----
          {{ status_before.stdout | default('') }}

          ---- status AFTER ----
          {{ status_after.stdout | default('') }}

          ---- tail neo4j.log ----
          {{ tail_neo4j_log.stdout | default('') }}

          ---- tail debug.log ----
          {{ tail_debug_log.stdout | default('') }}
      changed_when: false

  handlers:
    # --- BIN MODE (tarball script under {{ neo4j_bin_dir }}) ---
    - name: Stop Neo4j (bin)
      listen: "Stop Neo4j"
      when: not (neo4j_use_service | bool)
      command: "{{ neo4j_ctl }} stop"
      args:
        chdir: "{{ neo4j_bin_dir }}"
      register: stop_out
      failed_when: false     # ok if already stopped
      changed_when: stop_out.rc == 0

    - name: Start Neo4j (bin)
      listen: "Start Neo4j"
      when: not (neo4j_use_service | bool)
      command: "{{ neo4j_ctl }} start"
      args:
        chdir: "{{ neo4j_bin_dir }}"
      register: start_out
      changed_when: true

    - name: Wait until running (bin)
      listen: "Wait until running"
      when: not (neo4j_use_service | bool)
      command: "{{ neo4j_ctl }} status"
      args:
        chdir: "{{ neo4j_bin_dir }}"
      register: status_check
      retries: 40           # ~200s
      delay: 5
      until: status_check.rc == 0
      changed_when: false

    - name: Wait for Bolt (bin)
      listen: "Wait for Bolt"
      when: not (neo4j_use_service | bool)
      wait_for:
        # Run on the REMOTE; omit 'host' so it checks the target’s own socket
        port: "{{ neo4j_wait_port }}"
        delay: 5
        timeout: 600
      changed_when: false

    # --- SERVICE MODE (systemd) ---
    - name: Restart service
      listen: "Restart service"
      when: (neo4j_use_service | bool)
      become: true
      become_user: root
      service:
        name: "{{ neo4j_service_name | default('neo4j') }}"
        state: restarted

    - name: Wait until running (svc)
      listen: "Wait until running (svc)"
      when: (neo4j_use_service | bool)
      become: true
      become_user: root
      command: systemctl is-active "{{ neo4j_service_name | default('neo4j') }}"
      register: svc_active
      retries: 40
      delay: 5
      until: svc_active.stdout.strip() == "active"
      changed_when: false

    - name: Wait for Bolt (svc)
      listen: "Wait for Bolt (svc)"
      when: (neo4j_use_service | bool)
      wait_for:
        port: "{{ neo4j_wait_port }}"
        delay: 5
        timeout: 600
      changed_when: false
