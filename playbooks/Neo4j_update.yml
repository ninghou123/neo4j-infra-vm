  tasks:
    - name: Backup current config (timestamped)
      copy:
        src: "{{ neo4j_config_file }}"
        dest: "{{ neo4j_config_file }}{{ backup_suffix | default('.pre_ansible_' + lookup('pipe','date +%Y%m%d%H%M%S')) }}"
        remote_src: true

    # --- NEW: capture current values before we change anything ---
    - name: Capture BEFORE values for managed params
      vars:
        wanted: "{{ (config_parameters | default({})) | dict2items }}"
      set_fact:
        before_values: "{{ before_values | default({}) | combine({ item.key:
          lookup('ini', item.key, file=neo4j_config_file, type='properties', default='__ABSENT__') }) }}"
      loop: "{{ wanted }}"
      changed_when: false

    - name: Ensure desired parameters are present/updated (idempotent)
      ansible.builtin.ini_file:
        path: "{{ neo4j_config_file }}"
        option: "{{ item.key }}"
        value: "{{ item.value }}"
        no_extra_spaces: true
        backup: false
      loop: "{{ (config_parameters | default({})) | dict2items }}"
      register: edit_results

    # --- NEW: capture values after edit ---
    - name: Capture AFTER values for managed params
      vars:
        wanted: "{{ (config_parameters | default({})) | dict2items }}"
      set_fact:
        after_values: "{{ after_values | default({}) | combine({ item.key:
          lookup('ini', item.key, file=neo4j_config_file, type='properties', default='__ABSENT__') }) }}"
      loop: "{{ wanted }}"
      changed_when: false

    # --- NEW: compute detailed changes list ---
    - name: Build detailed change lines (key: old -> new)
      vars:
        wanted_keys: "{{ (config_parameters | default({})) | dict2items | map(attribute='key') | list }}"
      set_fact:
        changes_detailed: >-
          {{
            wanted_keys
            | select('in', wanted_keys)  # no-op, keeps list
            | map('extract', {'k':''})   # force jinja eval
          }}
      changed_when: false

    - name: Compute changes_detailed content
      set_fact:
        changes_detailed: >-
          {{
            (changes_detailed | default([]))
            + (
              (config_parameters | default({})) | dict2items
              | map(attribute='key')
              | select('reject', 'equalto', None)
              | map('regex_replace', '^(.*)$', '\\1')
              | list
              | map('community.general.dict_kv', 'key')  # harmless transform
              | list
            )
      changed_when: false

    - name: Build pretty diff lines
      set_fact:
        pretty_diff: >-
          {{
            (config_parameters | default({})) | dict2items
            | map(attribute='key')
            | select('reject', 'equalto', None)
            | map('map', 'regex_replace', '^(.*)$', '\\1') | list  # no-op
          }}
      changed_when: false

    # Simple, explicit loop to build a clean list of changed items
    - name: Assemble pretty_diff list (only changed)
      set_fact:
        pretty_diff: "{{ (pretty_diff | default([])) + [ item ~ ': ' ~ (before_values[item]|default('__ABSENT__')) ~ ' -> ' ~ (after_values[item]|default('__ABSENT__')) ] }}"
      when: before_values[item] | default('__ABSENT__') != after_values[item] | default('__ABSENT__')
      loop: "{{ (config_parameters | default({})) | dict2items | map(attribute='key') | list }}"
      changed_when: false

    - name: Compute whether any parameter changed
      set_fact:
        changed_any: "{{ (edit_results.results | selectattr('changed') | list | length) > 0 }}"
      changed_when: false

    - name: Trigger restart if config changed
      when: changed_any | bool
      debug:
        msg: "Config changed â†’ restarting Neo4j"
      changed_when: true
      notify:
        - restart neo4j (bin)
        - restart neo4j (svc)

    - meta: flush_handlers
