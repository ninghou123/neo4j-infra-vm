# playbooks/Neo4j_update.yml
---
- name: Update Neo4j config on this VM and restart (with safeguards + report)
  hosts: neo4j
  serial: 1
  any_errors_fatal: true
  gather_facts: false

  become: true
  become_user: "{{ neo4j_user | default('neo4j') }}"
  become_method: sudo

  # (A) ←← This is where the play "goes to vars.yml"
  # Use playbook_dir so the path is stable no matter where you call it from.
  vars_files:
    - "{{ playbook_dir }}/../inventories/vars.yml"

  pre_tasks:
   - name: Who am I without become?
      command: whoami
      register: me_no_become
      changed_when: false
    
    - name: Who am I with become?
      become: true
      become_user: "{{ neo4j_user | default('neo4j') }}"
      command: whoami
      register: me_with_become
      changed_when: false
    
    - name: Show users
      debug:
        msg:
          - "ssh user: {{ me_no_become.stdout }}"
          - "become user: {{ me_with_become.stdout }}"
    
    - name: stat neo4j.conf
      become: true
      become_user: "{{ neo4j_user | default('neo4j') }}"
      stat:
        path: "{{ neo4j_config_file }}"
      register: cfgstat
    
    - name: Show perms
      debug:
        msg:
          - "path={{ neo4j_config_file }}"
          - "owner={{ cfgstat.stat.pw_name }}, group={{ cfgstat.stat.gr_name }}, mode={{ '%04o' % cfgstat.stat.mode }}"
          - "readable={{ cfgstat.stat.readable }}, writable={{ cfgstat.stat.writable }}, executable={{ cfgstat.stat.executable }}"
    
    - name: Writable check as become user
      become: true
      become_user: "{{ neo4j_user | default('neo4j') }}"
      command: test -w "{{ neo4j_config_file }}"
      register: writable_check
      changed_when: false
      failed_when: writable_check.rc != 0

    - name: Precheck | neo4j.conf exists and is writable
      stat:
        path: "{{ neo4j_config_file }}"
      register: cfg

    - name: Precheck | Fail early if file missing
      fail:
        msg: "neo4j_config_file not found: {{ neo4j_config_file }}"
      when: not cfg.stat.exists

    - name: Precheck | Config is writable by run-as user
      command: test -w "{{ neo4j_config_file }}"
      register: writable_check
      changed_when: false

    - name: Precheck | Fail if config is not writable
      fail:
        msg: "neo4j.conf is not writable by {{ neo4j_user | default('neo4j') }}: {{ neo4j_config_file }}"
      when: writable_check.rc != 0

    - name: Capture status BEFORE
      command: "{{ neo4j_ctl }} status"
      register: status_before
      failed_when: false
      changed_when: false

  tasks:
    - name: Backup current config (timestamped)
      copy:
        src: "{{ neo4j_config_file }}"
        dest: "{{ neo4j_config_file }}{{ backup_suffix | default('.pre_ansible_' + lookup('pipe','date +%Y%m%d%H%M%S')) }}"
        remote_src: true

    # (B) ←← This is where we "grab the updated/new parameters from vars.yml"
    # and apply them into neo4j.conf. Using ini_file makes it precise & idempotent.
    - name: Ensure all desired parameters from vars.yml are set
      ansible.builtin.ini_file:
        path: "{{ neo4j_config_file }}"
        option: "{{ item.key }}"
        value: "{{ item.value }}"
        no_extra_spaces: true
        backup: false
      loop: "{{ (config_parameters | default({})) | dict2items }}"
      register: set_params

    # (C) ←← Detect if anything actually changed
    - name: Compute whether any parameter changed
      set_fact:
        changed_any: "{{ (set_params.results | selectattr('changed') | list | length) > 0 }}"
      changed_when: false

    # (D) ←← Only restart when there was a real change (or force_restart=true)
    - name: Trigger restart if there were config changes OR force_restart=true
      when: changed_any or (force_restart | default(false) | bool)
      debug:
        msg: "Config changed ({{ changed_any }}) or force_restart=true → restarting Neo4j"
      changed_when: true
      notify:
        - Restart via bin
        - Restart via service

    - meta: flush_handlers

    - name: Capture status AFTER
      command: "{{ neo4j_ctl }} status"
      register: status_after
      failed_when: false
      changed_when: false

    # Optional: show final lines that were touched (helpful in logs)
    - name: Show final values for keys we updated
      command: >
        bash -lc "grep -E '^\s*({{ (config_parameters | default({})) | dict2items | map(attribute='key') | list | join('|') | regex_escape }})\s*=' '{{ neo4j_config_file }}' || true"
      register: final_lines
      changed_when: false

    - debug:
        var: final_lines.stdout

  handlers:
    # --- BIN MODE ---
    - name: Stop Neo4j (bin)
      listen: "Restart via bin"
      when: not (neo4j_use_service | bool)
      command: "{{ neo4j_ctl }} stop"
      args:
        chdir: "{{ neo4j_bin_dir }}"

    - name: Start Neo4j (bin)
      listen: "Restart via bin"
      when: not (neo4j_use_service | bool)
      command: "{{ neo4j_ctl }} start"
      args:
        chdir: "{{ neo4j_bin_dir }}"

    - name: Wait for Bolt (bin)
      listen: "Restart via bin"
      when: not (neo4j_use_service | bool)
      wait_for:
        host: "{{ neo4j_wait_host }}"
        port: "{{ neo4j_wait_port }}"
        delay: 5
        timeout: 180

    # --- SERVICE MODE ---
    - name: Restart service
      listen: "Restart via service"
      when: (neo4j_use_service | bool)
      service:
        name: "{{ neo4j_service_name | default('neo4j') }}"
        state: restarted

    - name: Wait for Bolt (service)
      listen: "Restart via service"
      when: (neo4j_use_service | bool)
      wait_for:
        host: "{{ neo4j_wait_host }}"
        port: "{{ neo4j_wait_port }}"
        delay: 5
        timeout: 180
